select COUNT(emp_id) 
from employee;--to find no. of employees
select COUNT(emp_id) 
from employee
where sex='F' and birth_day>'1971-01-01'; --no. of female emp born after 1970
select AVG(salary)
from employee
where sex='m';  --avg of all men employee salary
select SUM(salary)
from employee; --sum of all salary
 select count(sex)
 from employee; -- this is only counting of entries or how many employees have entry in sex column
  select count(sex),sex
  from employee
  group by sex; --how many female and male employee
  --this called aggregation , meaning of aggregate is "a whole formed by combining several separate elements."
select sum(total_sales),emp_id
from works_with
group by emp_id; --how much each employee has sold the product
select sum(total_sales),client_id
from works_with
group by client_id; --how much each client  has taken the product
--EXTRA
--FIND ANT CLIENT WHO ARE AN LLC
SELECT * 
FROM CLIENT
WHERE CLIENT_NAME LIKE '%LLC';          -- %LLC here % defines any number of character and then name should end with LLC
  --FIND ANT branch_suppliers WHO ARE in labeL BUSSINESS 
SELECT * 
FROM branch_supplier
WHERE supplier_name LIKE '% LABEL%';    -- %LLC here % defines any number of character and then name should end with LLC
--FIND ANY EMPLOYEE BORN IN OCTOBER 
SELECT *
FROM EMPLOYEE
WHERE BIRTH_DAY LIKE '____-10%'; --HERE '_' REPRESENTS ANY RANDOM CHARACTER
--FIND THE CLIENT WHICH ARE SCHOOLS
SELECT *
FROM CLIENT
WHERE CLIENT_NAME LIKE '%SCHOOL%';
--union 
select first_name
from employee
union
select branch_name
from branch;  --to use union we have select same no. of attribute at both side 
--list of all clients and branch suppliers name
select client_name,client.branch_id
from client
union
select supplier_name,branch_supplier.branch_id
from branch_supplier;
--find money earned and spent by company
select salary 
from employee
union 
select total_sales
from works_with;
--thus union in short combines attributes and same no. of attributes 
--joins
--joins are used to combine rows from different 2 or more  attributes

-- Add the extra branch
INSERT INTO branch VALUES(4, "Buffalo", NULL, NULL);

SELECT employee.emp_id, employee.first_name, branch.branch_name
FROM employee
JOIN branch              -- SIMPLE JOIN
ON employee.emp_id = branch.mgr_id; --theseline shows if empid=mgrid then only both table's row are gonna be joined ,at which specific column, into a single table
--when we use simple join its called inner join
--when we used inner join we just got diplayed the rows which had empid=mgrid 
--when we use left join all the employees got included  THUS in left join we include all the table"s row fromleft table but only the matched items are going to display of branch table which is right table 
--hence here table which is having from statement is left table 
SELECT employee.emp_id, employee.first_name, branch.branch_name
FROM employee
LEFT JOIN branch    -- LEFT JOIN
ON employee.emp_id = branch.mgr_id; --it will include all the rows of  branch table 
SELECT employee.emp_id, employee.first_name, branch.branch_name
FROM employee
RIGHT JOIN branch    -- RIGHT JOIN
ON employee.emp_id = branch.mgr_id;
--thus in left join we get all rows from left join 
--in right join we get all the rows from right table
--a FULL OUTER JOIN is equal to left join plus right join no matter if they meet the conditions (here for instance condition is empid=mgrid )
